package com.gitthub.youssefagagg.ecommerceorderprocessor.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.math.BigDecimal;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

/**
 * Payment entity for storing payment information.
 */
@Entity
@Table(name = "payments")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@ToString(exclude = "order")
public class Payment extends AbstractAuditingEntity {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne
  @JoinColumn(name = "order_id",
              nullable = false)
  private Order order;

  @NotNull
  @DecimalMin(value = "0.0",
              inclusive = false)
  @Column(name = "amount",
          nullable = false,
          precision = 10,
          scale = 2)
  private BigDecimal amount;

  @NotNull
  @Enumerated(EnumType.STRING)
  @Column(name = "status",
          nullable = false)
  private PaymentStatus status;

  @NotNull
  @Size(min = 2,
        max = 50)
  @Column(name = "payment_method",
          length = 50,
          nullable = false)
  private String paymentMethod;

  @Size(max = 100)
  @Column(name = "transaction_id",
          length = 100)
  private String transactionId;

  /**
   * Idempotency key to prevent duplicate payment processing. This should be a unique value
   * generated by the client for each payment attempt.
   */
  @Size(max = 100)
  @Column(name = "idempotency_key",
          length = 100)
  private String idempotencyKey;


}
