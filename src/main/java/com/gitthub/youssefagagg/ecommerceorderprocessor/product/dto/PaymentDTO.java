package com.gitthub.youssefagagg.ecommerceorderprocessor.product.dto;

import com.gitthub.youssefagagg.ecommerceorderprocessor.dto.AbstractAuditingEntityDto;
import com.gitthub.youssefagagg.ecommerceorderprocessor.product.entity.PaymentStatus;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.math.BigDecimal;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * DTO for {@link com.gitthub.youssefagagg.ecommerceorderprocessor.product.entity.Payment}.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class PaymentDTO extends AbstractAuditingEntityDto {

  private Long id;

  @NotNull
  private Long orderId;

  @NotNull
  @DecimalMin(value = "0.0",
              inclusive = false)
  private BigDecimal amount;

  @NotNull
  private PaymentStatus status;

  @NotNull
  @Size(min = 2,
        max = 50)
  private String paymentMethod;

  @Size(max = 100)
  private String transactionId;

  /**
   * Idempotency key to prevent duplicate payment processing. This should be a unique value
   * generated by the client for each payment attempt.
   */
  @Size(max = 100)
  private String idempotencyKey;
}
